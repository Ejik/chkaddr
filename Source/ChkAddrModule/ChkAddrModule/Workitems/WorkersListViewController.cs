//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add CAB Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-010-How_to_Create_Smart_Client_Solutions.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using ACOT.ChkAddrModule.Constants;
using ACOT.ChkAddrModule.Views.ListView;
using ACOT.Services.SubDivisionService;
using ACOT.Services.WorkersService;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using Microsoft.Practices.CompositeUI.EventBroker;
using Microsoft.Practices.CompositeUI.SmartParts;
using ACOT.CommonDialogsModule.Dialogs.ChoiceSubDivizion;
using ACOT.Infrastructure.Interface;

namespace ACOT.ChkAddrModule.WorkItems
{
    public class WorkersListViewController : WorkItemController
    {
        private ISubDivisionService _subdivisionService;
        private IWorkersService _workersService;
        private IWorkersListView _layoutView;
        private ACOT.Infrastructure.Interface.Services.IPageFlowNavigationController pageController;

        [EventPublication(EventTopicNames.DatasetUpdate, PublicationScope.WorkItem)]
        public event EventHandler DataSetUpdate;

        public override void Run()
        {
            AddServices();
            ExtendMenu();
            ExtendToolStrip();
            AddViews();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in WorkItem.Services collection or 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm
            
            _subdivisionService = WorkItem.Services.Get<ISubDivisionService>();
            if (_subdivisionService == null)
                _subdivisionService = WorkItem.Services.AddNew<SubDivisionService, ISubDivisionService>();

            _workersService = WorkItem.Services.Get<IWorkersService>();
            if (_workersService == null)
                _workersService = WorkItem.Services.AddNew<WorkersService, IWorkersService>();
        }

        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection. For an example 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-340-Showing_UIElements.htm
        }

        private void ExtendToolStrip()
        {
            //TODO: add new items to the ToolStrip in the Shell. See the UIExtensionSites collection in the WorkItem. 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-340-Showing_UIElements.htm
            
        }

        private void AddViews()
        {
            //TODO: create the Module views, add them to the WorkItem and show them in 
            //		a Workspace. See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-040-How_to_Add_a_View_with_a_Presenter.htm
        }

        //TODO: Add CommandHandlers and/or Event Subscriptions
        //		See ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-350-Registering_Commands.htm
        //		See ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-320-Publishing_and_Subscribing_to_Events.htm

        // Когда пользователь нажимает кнопку редактирования элементов,
        // запускается выбор подразделений для редактирования.
        
        [EventPublication(EventTopicNames.ChkAddrModuleClose, PublicationScope.Global)]
        public event EventHandler ChkAddrModuleClose;

        [EventSubscription(EventTopicNames.ManualEditBtnIsPressed, ThreadOption.UserInterface)]
        public void ManualEditBtnPressed(object sender, EventArgs e)
        {
            
            ChoiceSubDivisionDialog dialog = new ChoiceSubDivisionDialog();
            dialog.Text = "Откуда выбирать ТБН";
            dialog.Data = _subdivisionService.GetSubDivisions();

            DialogResult dr = dialog.ShowDialog();
            if (dr == DialogResult.OK)
            {
                string filter = "";
                for (int i = 0; i < dialog.DialogListView.VirtualListSize; i++)
                    if (dialog.DialogListView.Items[i].Checked)
                    {
                        filter += "OR TBN LIKE '" + dialog.Data[i].Id.ToString("D2") + "*' ";
                        //   _workersService.AddSubDivision(dialog.Data[i]);
                    }
                filter = filter.Remove(0, 3);

                _layoutView = WorkItem.Items.Get<IWorkersListView>(ACOT.ChkAddrModule.Interface.Constants.ViewNames.ListModuleLayout);
                if (_layoutView == null)
                {
                    _layoutView =
                        WorkItem.Items.AddNew<WorkersListView>(
                            ACOT.ChkAddrModule.Interface.Constants.ViewNames.ListModuleLayout);
                    _layoutView.BindingSource = _workersService.bingingSource;
                }

                RegisterViewInPageController();

                WorkItem.Workspaces[WorkspaceNames.ModalWindows].Show(_layoutView);
                WorkItem.Activate();
                
                _workersService.bingingSource.Filter = filter;

                _layoutView.SetCenterPosition();

                _layoutView.DataGridLayoutView.Select();
                WorkItem.Activate();
               
                _layoutView.DataGridLayoutView.Select();
                
                if (DataSetUpdate != null)
                    DataSetUpdate(this, EventArgs.Empty);
            }
            dialog.Dispose();
            //if (dr == DialogResult.Cancel)
                //if (!pageController.ViewOrder.Contains("MainView"))
                //    if (ChkAddrModuleClose != null)
                //        ChkAddrModuleClose(this, EventArgs.Empty);
        }

        private void RegisterViewInPageController()
        {
            const string viewID = "WorkersView";
            pageController =
                WorkItem.Services.Get<ACOT.Infrastructure.Interface.Services.IPageFlowNavigationController>();
            if (!pageController.ViewOrder.Contains(viewID))
                pageController.AddView(viewID, _layoutView);
            else
                pageController.SetVisibility(viewID);
        }

        [EventSubscription(EventTopicNames.DatasetUpdate, ThreadOption.UserInterface)]
        public void OnDataSetUpdate(object sender, EventArgs e)
        {
            _layoutView.BindingSource.Position++;
            _layoutView.BindingSource.Position--;

            // Update status message
            string message = "Количество сотрудников - " + _layoutView.BindingSource.Count.ToString() + " человек.";
            _layoutView.Status = message;
            //if (StatusUpdate != null)
            //    StatusUpdate(this, new EventArgs<string>(message));
        }

        [EventSubscription(EventTopicNames.CheckAllBtnIsPressed, ThreadOption.UserInterface)]
        public void OnCheckAllBtnIsPressed(object sender, EventArgs e)
        {
            string filter = "";
            _layoutView = WorkItem.Items.Get<IWorkersListView>(ACOT.ChkAddrModule.Interface.Constants.ViewNames.ListModuleLayout);
            if (_layoutView == null)
            {
                _layoutView = WorkItem.Items.AddNew<WorkersListView>(ACOT.ChkAddrModule.Interface.Constants.ViewNames.ListModuleLayout);
                _layoutView.BindingSource = _workersService.bingingSource;
            }

            RegisterViewInPageController();
            WorkItem.Workspaces[WorkspaceNames.ModalWindows].Show(_layoutView);
            WorkItem.Activate();
            _layoutView.DataGridLayoutView.Select();

            _workersService.bingingSource.Filter = filter;

            _layoutView.SetCenterPosition();


            WorkItem.Activate();

            if (DataSetUpdate != null)
                DataSetUpdate(this, EventArgs.Empty);

            _layoutView.CheckAllBtnClick();
        }

    }
}
