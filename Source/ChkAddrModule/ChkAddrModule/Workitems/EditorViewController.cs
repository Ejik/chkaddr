//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add CAB Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-010-How_to_Create_Smart_Client_Solutions.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using ACOT.ChkAddrModule.Constants;
using ACOT.ChkAddrModule.Interface.Services;
using ACOT.ChkAddrModule.Services;
using ACOT.ChkAddrModule.Views.EditorView;
using ACOT.ChkAddrModule.Views.ListView;
using ACOT.Services.SubDivisionService;
using ACOT.Services.WorkersService;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using Microsoft.Practices.CompositeUI.EventBroker;
using Microsoft.Practices.CompositeUI.SmartParts;
using ACOT.CommonDialogsModule.Dialogs.ChoiceSubDivizion;
using ACOT.Infrastructure.Interface;

namespace ACOT.ChkAddrModule.WorkItems
{
    public class EditorViewController : ACOT.Infrastructure.Interface.WorkItemController
    {
        private ISubDivisionService _subdivisionService;
        private IWorkersService _workersService;
        private ICheckAddressService _chkAddrSrv;

        public override void Run()
        {
            AddServices();
            ExtendMenu();
            ExtendToolStrip();
            AddViews();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in WorkItem.Services collection or 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm

            //_subdivisionService = WorkItem.Services.AddNew<SubDivisionService>();
            _workersService = WorkItem.Services.Get<IWorkersService>();
            if (_workersService == null)
                _workersService = WorkItem.Services.AddNew<WorkersService, IWorkersService>();

            IMdbService mdbSrv = WorkItem.Services.Get<IMdbService>();
            
        }

        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection. For an example 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-340-Showing_UIElements.htm
        }

        private void ExtendToolStrip()
        {
            //TODO: add new items to the ToolStrip in the Shell. See the UIExtensionSites collection in the WorkItem. 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-340-Showing_UIElements.htm
            
        }

        private void AddViews()
        {
            //TODO: create the Module views, add them to the WorkItem and show them in 
            //		a Workspace. See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-040-How_to_Add_a_View_with_a_Presenter.htm
            
            
        }

        //TODO: Add CommandHandlers and/or Event Subscriptions
        //		See ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-350-Registering_Commands.htm
        //		See ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-320-Publishing_and_Subscribing_to_Events.htm

        //[EventPublication(EventTopicNames.ChoiceSubDivision, PublicationScope.Global)]
        //public event EventHandler ChoiceSubDivision;

        [EventPublication(EventTopicNames.TitleUpdate, PublicationScope.Global)]
        public event EventHandler  TitleUpdate;

        [EventPublication(EventTopicNames.CheckCurrentAddressRun, PublicationScope.WorkItem)]
        public event EventHandler CheckCurrentAddressRun;

        [EventPublication(EventTopicNames.EditorViewClose, PublicationScope.Global)]
        public event EventHandler OnEditorViewClose;


        // Когда пользователь нажимает кнопку редактирования элементов,
        // запускается выбор подразделений для редактирования.

        [EventSubscription(EventTopicNames.EditorViewShow, ThreadOption.UserInterface)]
        public void EditorViewShow(object sender, EventArgs<int> e)
        {
            IEditorView editorView = WorkItem.Items.Get<IEditorView>(ACOT.ChkAddrModule.Interface.Constants.ViewNames.EditorModuleLayout);
            if (editorView == null)
            {
                editorView = WorkItem.Items.AddNew<EditorView>( ACOT.ChkAddrModule.Interface.Constants.ViewNames.EditorModuleLayout);
                editorView.bindingSource = _workersService.bingingSource;
            }
            ACOT.Infrastructure.Interface.Services.IPageFlowNavigationController pageController =
                WorkItem.Services.Get<ACOT.Infrastructure.Interface.Services.IPageFlowNavigationController>();

            const string leftViewID = "EditorView";
            if (!pageController.ViewOrder.Contains(leftViewID))
                pageController.AddView(leftViewID, editorView);

            WorkItem.Workspaces[WorkspaceNames.ModalWindows].Show(editorView);

            System.Data.DataRow row = _workersService.WorkersTable.FindByID(e.Data);
            
            // Установка окна по центу экрана
            editorView.SetCenterPosition();

            // Установка заголовка
            editorView.Title = row.ItemArray[1].ToString() + " " + row.ItemArray[2].ToString();

            const string rightViewID = "SelectionView";
            ACOT.ChkAddrModule.Views.AddrElementsSelectionView.IAddrElementsSelectionView rightView =
                WorkItem.Items.Get<ACOT.ChkAddrModule.Views.AddrElementsSelectionView.IAddrElementsSelectionView>(rightViewID);
            if (rightView == null)
                rightView = WorkItem.Items.AddNew
                    <ACOT.ChkAddrModule.Views.AddrElementsSelectionView.AddrElementsSelectionView>(rightViewID);
                WorkItem.Workspaces[WorkspaceNames.RightWorkspace].Show(rightView);

            editorView.KodRegion.Select();

            if (CheckCurrentAddressRun != null)
                CheckCurrentAddressRun(this, EventArgs.Empty);

            
            WorkItem.Activate();
        }

        
    }
}
