//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add CAB Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-010-How_to_Create_Smart_Client_Solutions.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using ACOT.ChkAddrModule.Constants;
using ACOT.ChkAddrModule.Services;
using ACOT.ChkAddrModule.Views.IndexerView;
using ACOT.ChkAddrModule.Views.MainView;
using ACOT.ChkAddrModule.WorkItems;
using ACOT.Services.WorkersService;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using Microsoft.Practices.CompositeUI.EventBroker;
using Microsoft.Practices.CompositeUI.SmartParts;
using ACOT.Infrastructure.Interface;
using ACOT.ChkAddrModule.Interface.Services;

namespace ACOT.ChkAddrModule
{
    public class ModuleController : ACOT.Infrastructure.Interface.WorkItemController
    {
        private ICmdLineService _cmdLine;
        private ACOT.ChkAddrModule.Views.BackGroundView.GlassBackgroundView bgView;
        private ACOT.Infrastructure.Interface.Services.IPageFlowNavigationController _pageController;
        
        private ControlledWorkItem<WorkersListViewController> _workersListWorkItem;
        private ControlledWorkItem<EditorViewController> _editorWorkitem;

        

        [DllImport("user32.dll")]
        private static extern IntPtr SetActiveWindow(IntPtr hWnd);
        

        public override void Run()
        {
            AddServices();
            ExtendMenu();
            ExtendToolStrip();
            AddViews();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in WorkItem.Services collection or 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm
            _cmdLine = WorkItem.Services.Get<ICmdLineService>();
            if (_cmdLine == null)
                _cmdLine = WorkItem.Services.AddNew<CmdLineService, ICmdLineService>();
            
            _pageController =
                WorkItem.Services.AddNew
                    <PageFlowNavigationController, Infrastructure.Interface.Services.IPageFlowNavigationController>();

            ICheckAddressService chkaddrSrv = WorkItem.Services.Get<ICheckAddressService>();
            if (chkaddrSrv == null)
                WorkItem.Services.AddOnDemand<CheckAddressService, ICheckAddressService>();

            IMdbService mdbService = WorkItem.Services.Get<IMdbService>();
            if (mdbService == null)
                mdbService = WorkItem.Services.AddNew<mdbService, IMdbService>();

            mdbService.IndexingRun();
        }

        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection. For an example 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-340-Showing_UIElements.htm
        }

        private void ExtendToolStrip()
        {
            //TODO: add new items to the ToolStrip in the Shell. See the UIExtensionSites collection in the WorkItem. 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-340-Showing_UIElements.htm
        }

        private void AddViews()
        {
            //TODO: create the Module views, add them to the WorkItem and show them in 
            //		a Workspace. See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-040-How_to_Add_a_View_with_a_Presenter.htm
        }

        //TODO: Add CommandHandlers and/or Event Subscriptions
        //		See ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-350-Registering_Commands.htm
        //		See ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-320-Publishing_and_Subscribing_to_Events.htm


        [EventPublication(EventTopicNames.CheckAllBtnIsPressed, PublicationScope.Global)]
        public event EventHandler CheckAllBtnIsPressed;

        [EventPublication(EventTopicNames.ManualEditBtnIsPressed, PublicationScope.Global)]
        public event EventHandler ManualEditBtnIsPressed;

        [EventPublication(EventTopicNames.EditorViewShow, PublicationScope.Global)]
        public event EventHandler EditorViewShow;
        [EventPublication(EventTopicNames.IndexingRun, PublicationScope.Global)]
        public event EventHandler IndexingRun;

        [EventSubscription(EventTopicNames.CheckAddressViewShow, ThreadOption.UserInterface)]
        public void OnMainViewShow(object sender, EventArgs<string> e)
        {
            _pageController =
                WorkItem.Services.Get<ACOT.Infrastructure.Interface.Services.IPageFlowNavigationController>();
            bgView = WorkItem.Items.Get<ACOT.ChkAddrModule.Views.BackGroundView.GlassBackgroundView>(
                           ACOT.ChkAddrModule.Interface.Constants.ViewNames.BackgroundLayout);

            if (bgView == null)
                bgView = WorkItem.Items.AddNew<ACOT.ChkAddrModule.Views.BackGroundView.GlassBackgroundView>();
            WorkItem.Workspaces[ACOT.ChkAddrModule.Interface.Constants.WorkspaceNames.ModalWindows].Show(bgView);


            string cmdLineParameter = e.Data.ToString();
            if (_cmdLine.isAddrpFileExist)
            {
                IWorkersService _ws = WorkItem.Services.Get<WorkersService>();
                if (_ws == null)
                    _ws = WorkItem.Services.AddNew<WorkersService,IWorkersService>();
                int idx = _ws.GetIdByTBN(_cmdLine.TBN);
                if (idx == 0)
                    Environment.Exit(1);
                
                if (_editorWorkitem == null)
                {
                    _editorWorkitem = WorkItem.WorkItems.AddNew<ControlledWorkItem<EditorViewController>>();
                    _editorWorkitem.Controller.Run();
                }
                if (EditorViewShow != null)
                    EditorViewShow(this, new EventArgs<int>(idx));
            }
            else
                switch (cmdLineParameter)
                {
                    case "k":
                        if (_workersListWorkItem == null)
                        {
                            _workersListWorkItem = this.WorkItem.WorkItems.AddNew<ControlledWorkItem<WorkersListViewController>>();
                            _workersListWorkItem.Controller.Run();
                        }
                        if (CheckAllBtnIsPressed != null)
                            CheckAllBtnIsPressed(this, EventArgs.Empty);
                        break;
                    case "p":
                        if (_workersListWorkItem == null)
                        {
                            _workersListWorkItem = this.WorkItem.WorkItems.AddNew<ControlledWorkItem<WorkersListViewController>>();
                            _workersListWorkItem.Controller.Run();
                        }
                        if (ManualEditBtnIsPressed != null)
                            ManualEditBtnIsPressed(this, EventArgs.Empty);
                        break;
                    default:
                        ShowMainLayoutView();
                        break;
                }
        }

        public void ShowMainLayoutView()
        {
            IMainLayoutView view = WorkItem.Items.Get<MainLayoutView>(ACOT.ChkAddrModule.Interface.Constants.ViewNames.MainModuleLayout);
            if (view == null)
                view = WorkItem.Items.AddNew<MainLayoutView>(ACOT.ChkAddrModule.Interface.Constants.ViewNames.MainModuleLayout);

            const string viewID = "MainView";
            if (!_pageController.ViewOrder.Contains(viewID))
                _pageController.AddView(viewID, view);


            WorkItem.Workspaces[ACOT.ChkAddrModule.Interface.Constants.WorkspaceNames.ModalWindows].Show(view);
            view.SetCenter();
            
            WorkItem.Activate();
            view.SetFocus();

            IntPtr hr = SetActiveWindow(view.ParentFm.Handle);
        }

    }
}
