//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using ACOT.Infrastructure.Interface.Constants;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using ACOT.Infrastructure.Interface;

namespace ACOT.ChkAddrModule.Views.MainView
{
    public partial class MainLayoutView : UserControl, IMainLayoutView, ISmartPartInfoProvider
    {
        public MainLayoutView()
        {
            InitializeComponent();
        }

        #region GetSmartPartInfo method
        public ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
        {
            ISmartPartInfo spi;
            if (smartPartInfoType.IsAssignableFrom(typeof(WindowSmartPartInfo)))
            {
                WindowSmartPartInfo LayoutView = new WindowSmartPartInfo();
                LayoutView.MaximizeBox = false;
                LayoutView.MinimizeBox = false;

                LayoutView.Keys[WindowWorkspaceSetting.FormBorderStyle] = FormBorderStyle.FixedDialog;
                LayoutView.Keys[WindowWorkspaceSetting.FormShowIcon] = false;
                LayoutView.Keys[WindowWorkspaceSetting.KeyPreview] = true;
                LayoutView.Keys[WindowWorkspaceSetting.TopMost] = true;
                LayoutView.Keys[WindowWorkspaceSetting.KeyDown] = new KeyEventHandler(View_KeyDown);
                spi = LayoutView;
            }
            else
            {
                spi = Activator.CreateInstance(smartPartInfoType) as ISmartPartInfo;
            }

            //spi.Description = Properties.Resources.FindCustomerResultsViewDescription;
            //spi.Title = "Адресный классификатор";

            return spi;
        }
        #endregion 

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);
        }

        public Form ParentFm
        {
            get { return ParentForm; }
        }

        public void SetCenter()
        {
            ParentForm.Top = Screen.PrimaryScreen.Bounds.Height/2 - ParentForm.Height/2;
            ParentForm.Left = Screen.PrimaryScreen.Bounds.Width/2 - ParentForm.Width/2;
        }

        public void SetFocus()
        {
            ParentForm.Activate();
            linkLabel1.Select();
        }

        private void _CheckAllBtn_Click(object sender, EventArgs e)
        {
            _presenter.OnCheckAll();
        }

        private void _ManualEditBtn_Click(object sender, EventArgs e)
        {
            _presenter.OnManualEdit();
        }

        private void View_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
                //_presenter.OnCloseView();
                ParentForm.Close();
        }

        private void _ManualEditBtn_Click(object sender, LinkLabelLinkClickedEventArgs e)
        {
            _presenter.OnManualEdit();
        }

        private void _CheckAllBtn_Click(object sender, LinkLabelLinkClickedEventArgs e)
        {
            _presenter.OnCheckAll();
        }
    }
}

