//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;
using ACOT.Infrastructure.Interface.Constants;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using ACOT.Infrastructure.Interface;

namespace ACOT.ChkAddrModule.Views.EditorView
{
    public partial class EditorView : UserControl, IEditorView, ISmartPartInfoProvider
    {
        private bool _isAddressCorrect;
        private BindingSource _bindingSource;
        private TextBox _currentElement;

        public EditorView()
        {
            InitializeComponent();
            _rightWorkspace.Name = WorkspaceNames.RightWorkspace;
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();

            base.OnLoad(e);
        }

        #region ISmartPartInfoProvider members
        public ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
        {
            ISmartPartInfo spi;
            if (smartPartInfoType.IsAssignableFrom(typeof(WindowSmartPartInfo)))
            {
                WindowSmartPartInfo LayoutView = new WindowSmartPartInfo();
                LayoutView.MaximizeBox = false;
                LayoutView.MinimizeBox = false;

                //LayoutView.Keys[WindowWorkspaceSetting.FormBorderStyle] = FormBorderStyle.FixedDialog;
                LayoutView.Keys[WindowWorkspaceSetting.FormShowIcon] = false;
                LayoutView.Keys[WindowWorkspaceSetting.TopMost] = true;
                LayoutView.Keys[WindowWorkspaceSetting.KeyPreview] = true;
                LayoutView.Keys[WindowWorkspaceSetting.KeyDown] = new KeyEventHandler(View_KeyDown);
                spi = LayoutView;
            }
            else
            {
                spi = Activator.CreateInstance(smartPartInfoType) as ISmartPartInfo;
            }

            //spi.Description = Properties.Resources.FindCustomerResultsViewDescription;
            //spi.Title = "Адресный классификатор";

            return spi;
        }
        #endregion

        private void View_KeyDown(object sender, KeyEventArgs e)
        {
            switch(e.KeyCode)
            {
                case Keys.Escape: _presenter.CloseViewByCloseBtnClick(); break;
                case Keys.F10: _presenter.SaveBtnClick(); break;
            }
        }

        private void _closeBtn_Click(object sender, EventArgs e)
        {
            _presenter.CloseViewByCloseBtnClick();
        }

        private void _saveAndCloseBtn_Click(object sender, EventArgs e)
        {
            _presenter.SaveBtnClick();
        }

        #region IEditorView Members

        public BindingSource bindingSource
        {
            get { return this._bindingSource; }
            set
            {
                this._bindingSource = value;
                BindComponents();
            }
        }

        private void BindComponents()
        {
            this._fullAddrTb.DataBindings.Add("Text", this._bindingSource, "FULLADDR");
            this._fullAddrTb.DataBindings.DefaultDataSourceUpdateMode = DataSourceUpdateMode.Never;
            this._kodRegTb.DataBindings.Add("Text", this._bindingSource, "KODREG", false, DataSourceUpdateMode.Never);
            this._kodRegTb.DataBindings.DefaultDataSourceUpdateMode = DataSourceUpdateMode.Never;
            this._indexTb.DataBindings.Add("Text", this._bindingSource, "INDEX", false, DataSourceUpdateMode.Never);
            this._indexTb.DataBindings.DefaultDataSourceUpdateMode = DataSourceUpdateMode.Never;
            this._raionTb.DataBindings.Add("Text", this._bindingSource, "RAION", false, DataSourceUpdateMode.Never);
            this._raionTb.DataBindings.DefaultDataSourceUpdateMode = DataSourceUpdateMode.Never;
            this._gorodTb.DataBindings.Add("Text", this._bindingSource, "GOROD", false, DataSourceUpdateMode.Never);
            this._gorodTb.DataBindings.DefaultDataSourceUpdateMode = DataSourceUpdateMode.Never;
            this._naspunktTb.DataBindings.Add("Text", this._bindingSource, "NPUNKT", false, DataSourceUpdateMode.Never);
            this._naspunktTb.DataBindings.DefaultDataSourceUpdateMode = DataSourceUpdateMode.Never;
            this._ulicaTb.DataBindings.Add("Text", this._bindingSource, "ULICA", false, DataSourceUpdateMode.Never);
            this._ulicaTb.DataBindings.DefaultDataSourceUpdateMode = DataSourceUpdateMode.Never;
            this._domTb.DataBindings.Add("Text", this._bindingSource, "DOM", false, DataSourceUpdateMode.Never);
            this._domTb.DataBindings.DefaultDataSourceUpdateMode = DataSourceUpdateMode.Never;
            this._korpTb.DataBindings.Add("Text", this._bindingSource, "KORPUS", false, DataSourceUpdateMode.Never);
            this._korpTb.DataBindings.DefaultDataSourceUpdateMode = DataSourceUpdateMode.Never;
            this._kvartTb.DataBindings.Add("Text", this._bindingSource, "KVART", false, DataSourceUpdateMode.Never);
            this._kvartTb.DataBindings.DefaultDataSourceUpdateMode = DataSourceUpdateMode.Never;
        }

        public TextBox FullAddress
        {
            get { return this._fullAddrTb; }
            set { _fullAddrTb = value; }
        }

        public TextBox KodRegion
        {
            get { return this._kodRegTb; }
            set { _kodRegTb = value; }
        }

        Label IEditorView.RegionLabel
        {
            get { return this._regLabel; }
        }

        TextBox IEditorView.Index
        {
            get { return this._indexTb; }
        }

        TextBox IEditorView.Raion
        {
            get { return this._raionTb; }
        }

        public TextBox Gorod
        {
            get { return this._gorodTb; }
        }

        public TextBox NasPunkt
        {
            get { return this._naspunktTb; }
        }

        public TextBox Ulica
        {
            get { return this._ulicaTb; }
        }

        public TextBox Dom
        {
            get { return this._domTb; }
        }

        public TextBox Korp
        {
            get { return this._korpTb; }
        }

        public TextBox Kvart
        {
            get { return this._kvartTb; }
        }

        public Point ViewLocation
        {
            get { return this.ParentForm.Location; }
            set { this.ParentForm.Location = value; }
        }

        public string Title
        {
            get
            {
                return this.ParentForm.Text;
            }
            set
            {
                this.ParentForm.Text = value;
            }
        }

        public int ViewWidth
        {
            get { return ParentForm.Width; }
        }

        public TextBox CurrentElement
        {
            get { return this._currentElement; }
            set { _currentElement = value; }
        }

        public Form ParentFm
        {
            get { return ParentForm; }
        }

        public IWorkspace rightWorkSpace
        {
            get { return _rightWorkspace; }
        }

        public int UserCtrlWidth
        {
            get { return Width; }
            set { Width = value; }
        }

        public bool IsAddressCorrect
        {
            get { return _isAddressCorrect; }
            set { _isAddressCorrect = value; }
        }

        void IEditorView.SetCenterPosition()
        {
            this.ParentForm.Location =
                new Point(Screen.PrimaryScreen.Bounds.Width / 2 - this.ParentForm.Width / 2,
                          Screen.PrimaryScreen.Bounds.Height / 2 - this.ParentForm.Height / 2);

            //ParentForm.Width = 698;
            //Width = 690;
        }

        public PictureBox RaionErrorPicture
        {
            get { return _RaionErrorPicture; }
        }

        public PictureBox GorodErrorPicture
        {
            get { return _GorodErrorPicture; }
        }

        public PictureBox NaspunktErrorPicture
        {
            get { return _NaspunktErrorPicture; }
        }

        public PictureBox UlicaErrorPicture
        {
            get { return _UlicaErrorPicture; }
        }

        #endregion

        private void _actionBtn_Click(object sender, EventArgs e)
        {
            Button curBtn = sender as Button;
            switch (curBtn.Name)
            {
                case "_kodRegBtn": this._currentElement = this._kodRegTb; break;
                case "_raionSelectBtn": this._currentElement = this._raionTb; break;
                case "_gorodSelectBtn": this._currentElement = this._gorodTb; break;
                case "_naspunktSelectBtn": this._currentElement = this._naspunktTb; break;
                case "_ulicaSelectBtn": this._currentElement = this._ulicaTb; break;
            }

            _presenter.actionBtnClick(sender);
        }

        private void _textChanged(object sender, EventArgs e)
        {
            this._presenter.OnTextChanged(sender);
        }

        private void _onTextBoxItemEnter(object sender, EventArgs e)
        {
            _presenter.actionBtnClick(sender);
        }

        private void _onTextBoxLeave(object sender, EventArgs e)
        {
            _presenter.OnTextBoxLeave(sender);
        }

        private void _kodRegTb_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.Enter: _presenter.OnEnterKeyDown(sender);
                    break;
                case Keys.Tab: _presenter.SelectNextControl((Control)sender, false);
                    break;
                case Keys.Up: //_presenter.SelectNextControl((Control)sender, false);
                    break;
                case Keys.Down: //_presenter.SelectNextControl((Control)sender, true);
                    break;
            }
        }

        private void _raionTb_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {

        }

        private void _onTextBox_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            if (e.KeyCode == Keys.Tab)
            {
                //_presenter.SelectNextControl((Control)sender, true);
                //e.IsInputKey = true;
            }
        }

        private void _termianteBtn_Click(object sender, EventArgs e)
        {
            ParentForm.Close();
        }
    }
}

