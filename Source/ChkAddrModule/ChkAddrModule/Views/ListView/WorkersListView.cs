//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;
using ACOT.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System.ComponentModel;
using ACOT.Infrastructure.Interface.Constants;

namespace ACOT.ChkAddrModule.Views.ListView
{
    public partial class WorkersListView : UserControl, IWorkersListView, ISmartPartInfoProvider
    {
        private BindingSource _bindSource;

        public WorkersListView()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);
        }

        #region IWorkersListView Members

        
        public ToolStrip LayoutToolStrip
        {
            get { return this._toolStrip; }
        }

        public BindingSource BindingSource
        {
            get { return this._bindSource; }
            set
            {
                this._bindSource = value;
                this._dataGridView.DataSource = this._bindSource;
                //this._dataGridView.DataBindings.CollectionChanged += BindingsCollection1_CollectionChanged;
                for (int i = 3; i < this._dataGridView.Columns.Count - 1; i++)
                    this._dataGridView.Columns[i].Visible = false;
                this._dataGridView.Columns[0].Visible = false;

                int rowNumber = 1;
                foreach (DataGridViewRow row in this._dataGridView.Rows)
                {
                    row.HeaderCell.Value = rowNumber.ToString();
                    rowNumber++;
                }
            }
        }

        public string Title
        {
            get { return this.ParentForm.Text; }
            set { this.ParentForm.Text = value; }
        }

        public string Status
        {
            get { return this._statusLabel.Text; }
            set { this._statusLabel.Text = value; }
        }

        public ToolStripButton ChkAddrBtn
        {
            get { return _chkAllBtn; }
        }

        public void RefreshData()
        {
            this.Invalidate();
        }

        public DataGridView DataGridLayoutView
        {
            get { return this._dataGridView; }
        }

        public void CheckAllBtnClick()
        {
            _presenter.CheckAllAddresses();   
        }

        public Form ParentFm
        {
            get { return ParentForm; }
        }

        #endregion

        #region ISmartPartInfoProvider Members
        public ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
        {
            ISmartPartInfo spi;
            if (smartPartInfoType.IsAssignableFrom(typeof(WindowSmartPartInfo)))
            {
                WindowSmartPartInfo LayoutView = new WindowSmartPartInfo();
                LayoutView.MaximizeBox = false;
                LayoutView.MinimizeBox = false;
                
                //LayoutView.Keys[WindowWorkspaceSetting.FormBorderStyle] = FormBorderStyle.FixedDialog;
                LayoutView.Keys[WindowWorkspaceSetting.FormShowIcon] = false;
                LayoutView.Keys[WindowWorkspaceSetting.TopMost] = true;
                LayoutView.Keys[WindowWorkspaceSetting.KeyPreview] = true;
                LayoutView.Keys[WindowWorkspaceSetting.KeyDown] = new KeyEventHandler(View_KeyDown);
                spi = LayoutView;
            }
            else
            {
                spi = Activator.CreateInstance(smartPartInfoType) as ISmartPartInfo;
            }

            //spi.Description = Properties.Resources.FindCustomerResultsViewDescription;
            //spi.Title = "Адресный классификатор";

            return spi;
        }
        #endregion 

        private void View_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
            {
                _presenter.TryToCloseView();
                //_presenter.OnCloseView();
                ///ParentForm.Close();
            }
        }

        private void _dataGridView_CellMouseDoubleClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            _presenter.CellMouseDoubleClick(e);
        }

        private void _dataGridView_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            int rowNumber = 1;
            foreach (DataGridViewRow row in this._dataGridView.Rows)
            {
                row.HeaderCell.Value = rowNumber.ToString();
                rowNumber++;
            }
        }

        void IWorkersListView.SetCenterPosition()
        {
            this.ParentForm.Location =
                new Point(Screen.PrimaryScreen.Bounds.Width/2 - this.ParentForm.Width/2,
                          Screen.PrimaryScreen.Bounds.Height/2 - this.ParentForm.Height/2);
        }

        private void _chkAllBtn_Click(object sender, EventArgs e)
        {
            CheckAllBtnClick();
        }

        private void toolStripButton2_Click(object sender, EventArgs e)
        {
            _presenter.EnterPress();
        }

        private void _dataGridView_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.Enter:
                    e.Handled = true;
                    _presenter.EnterPress(); break;
            }

        }
    }
}

